
class Task with Runnable{
   run(){}
}

class PrintTask extends Task{
   override run(){
      println();
   }
}


module Blah{
   class Foo extends Task{
      override run(){
         println("Blah.run()");
      }
   }
}

function testInstanceOf(){
   assert "" ?= String;
   assert {:} ?= Map;
   assert new Task() ?=Runnable;
   assert new PrintTask() ?=Runnable;
   assert {} ?=Set;
   assert []?=List;
   assert []?=Collection;
   assert []!?=Map;
   assert ""!?=null;
   assert null!?=null;   
   assert null!?=String;   
   assert new Blah.Foo()?=Blah.Foo;
}

function testInstanceOfWithClass(){
   assert "" ?= String.class;
   assert {:} ?= Map.class;
   assert new Task() ?=Runnable.class;
   assert new PrintTask() ?=Runnable.class;
   assert new PrintTask() ?=new Task().class;   
   assert {} ?=Set.class;
   assert []?=List.class;
   assert []?=Collection.class;
   assert []!?=Map.class;
   assert []!?=null;
}

function testInstanceOfWithArray(){
   var a = new Task[1];
   var b = new Integer[1];
   var c = new String[1][2];
   assert a?=Task[];
   assert b?=Integer[];
   assert c?=String[][];
   assert a?=Task[].class;
   assert a!?=null;
   assert null!?=Integer.class;
}