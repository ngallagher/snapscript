import find.FilePatternScanner;
import core.PathConverter;
import core.store.FileStore;
import compile.StoreContext;
import compile.ResourceCompiler;
 
function runTests(directory) {
   const scanner = new FilePatternScanner(directory);
   const scripts = scanner.scan("**/*_test.snap");
   const converter = new PathConverter();
   const root = new File(directory);
   const store = new FileStore(root);
   const context = new StoreContext(store);
   const compiler = new ResourceCompiler(context);
         
   for(var script in scripts) {
      var executable = compiler.compile(script);
      var package = converter.createModule(script);
      
      try {
         executable.execute();
      }catch(e) {
         System.err.println("Failure for ${script}");
      }
      var registry = context.getRegistry();
      var container = registry.getModule(package);
      var tests = container.getFunctions();
      var scope = container.getScope();
      
      for(var test in tests){
         if(test.name.startsWith("test")) {
            timeTest(-> test.invocation.invoke(scope, scope), script, test.name);
         }
      }
   }
}

function timeTest(func, script, name) {
   var start = System.currentTimeMillis();
   
   try {
      func();
   } finally {
      var finish = System.currentTimeMillis();
      var duration = finish - start;
      
      System.err.println("${name}() in [${script}] in ${duration} ms");
   }
}

const project = System.getenv("PROJECT_ROOT"); // .project file
const directory = "${project}\\test";

timeTest(-> runTests(directory), directory, "runTests"); 