import awt.Point;
import util.Arrays;
import awt.Point;
import awt.Point;
import util.Random;
import awt.event.KeyEvent;
import awt.event.KeyListener;
import util.Map;
import util.concurrent.ConcurrentHashMap;
import awt.Canvas;
import awt.Color;
import awt.Dimension;
import awt.Font;
import awt.Graphics;
import awt.Graphics2D;
import awt.Point;
import awt.event.WindowAdapter;
import awt.event.WindowEvent;
import awt.image.BufferStrategy;
import swing.JFrame;
import swing.JPanel;


class Tetris {

    var game = new Game();
    var strategy;

    const BOARD_CORNER_X = 300;
    const BOARD_CORNER_Y = 50;

    const keyboard = new KeyboardInput();
    var lastIteration = System.currentTimeMillis();

    static const PIECE_WIDTH = 20;

    new() {
        var container = new JFrame("Tetris");
        var canvas = new Canvas();
        var panel = container.getContentPane();
        panel.setPreferredSize(new Dimension(800, 600));
        panel.setLayout(null);

        canvas.setBounds(0, 0, 800, 600);
        panel.add(canvas);
        canvas.setIgnoreRepaint(true);

        container.pack();
        container.setResizable(false);
        container.setVisible(true);

//        container.addWindowListener(new WindowAdapter() {
//            public void windowClosing(WindowEvent e) {
//                System.exit(0);
//            }
//        });

        canvas.addKeyListener(keyboard);
        canvas.requestFocus();

        canvas.createBufferStrategy(2);
        strategy = canvas.getBufferStrategy();
    }

    gameLoop() {
        while (true) {
            if (keyboard.newGame()) {
                game = new Game();
                game.startGame();
            }
            if (game.isPlaying()) {

                if (!game.isPaused()) {
                    tetrisLoop();
                }
                if (keyboard.pauseGame()) {
                    game.pauseGame();
                }
                try {
                    Thread.sleep(20);
                } catch (e) { 
                   e.printStackTrace();
                }
            }
            draw();
        }
    }

    tetrisLoop() {
        if (game.isDropping()) {
            game.moveDown();
        } else if (System.currentTimeMillis() - lastIteration >= game.getIterationDelay()) {
            game.moveDown();
            lastIteration = System.currentTimeMillis();
        }
        if (keyboard.rotate()) {
            game.rotate();
        } else if (keyboard.left()) {
            game.moveLeft();
        } else if (keyboard.right()) {
            game.moveRight();
        } else if (keyboard.drop()) {
            game.drop();
        }
    }

    draw() {
        var g = getGameGraphics();
        drawEmptyBoard(g);
        drawHelpBox(g);
        drawPiecePreviewBox(g);

        if (game.isPlaying()) {
            drawCells(g);
            drawPiecePreview(g, game.getNextPiece().getType());

            if (game.isPaused()) {
                drawGamePaused(g);
            }
        }

        if (game.isGameOver()) {
            drawCells(g);
            drawGameOver(g);
        }
        
        drawStatus(g);
        drawPlayTetris(g);

        g.dispose();
        strategy.show();
    }

    getGameGraphics() {
        return strategy.getDrawGraphics();
    }

    drawCells(g) {
        var cells = game.getBoardCells();
        for (var i = 0; i < 10; i++) {
            for (var j = 0; j < 20; j++) {
                drawBlock(g, BOARD_CORNER_X + i * 20, BOARD_CORNER_Y + (19 - j) * 20, getBoardCellColor(cells[i][j]));
            }
        }
    }

    drawEmptyBoard(g) {
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, 800, 600);
        g.setColor(Color.GRAY);
        g.drawRect(BOARD_CORNER_X - 1, BOARD_CORNER_Y - 1, 10 * PIECE_WIDTH + 2, 20 * PIECE_WIDTH + 2);
    }

    drawStatus(g) {
        g.setFont(new Font("Dialog", Font.PLAIN, 16));
        g.setColor(Color.RED);
        g.drawString(getLevel(), 10, 20);
        g.drawString(getLines(), 10, 40);
        g.drawString(getScore(), 20, 80);
    }

    drawGameOver(g) {
        var font = new Font("Dialog", Font.PLAIN, 16);
        g.setFont(font);
        g.setColor(Color.RED);
        g.drawString("GAME OVER", 350, 550);
    }

    drawGamePaused(g) {
        var font = new Font("Dialog", Font.PLAIN, 16);
        g.setFont(font);
        g.setColor(Color.YELLOW);
        g.drawString("GAME PAUSED", 350, 550);
    }


    drawPlayTetris(g) {
        var font = new Font("Dialog", Font.PLAIN, 16);
        g.setFont(font);
        g.setColor(Color.RED);
        g.drawString("Play TETRIS !", 350, 500);
    }

    getLevel() {
        return String.format("Your level: %1s", game.getLevel());
    }

    getLines() {
        return String.format("Full lines: %1s", game.getLines());
    }

    getScore() {
        return String.format("Score     %1s", game.getTotalScore());
    }

    drawPiecePreviewBox(g) {
        g.setFont(new Font("Dialog", Font.PLAIN, 16));
        g.setColor(Color.RED);
        g.drawString("Next:", 50, 420);
    }

    drawHelpBox(g) {
        g.setFont(new Font("Dialog", Font.PLAIN, 16));
        g.setColor(Color.RED);
        g.drawString("H E L P", 50, 140);
        g.drawString("F1: Pause Game", 10, 160);
        g.drawString("F2: New Game", 10, 180);
        g.drawString("UP: Rotate", 10, 200);
        g.drawString("ARROWS: Move left/right", 10, 220);
        g.drawString("SPACE: Drop", 10, 240);
    }

    drawPiecePreview(g, type) {
        for (var p in type.getPoints()) {
            drawBlock(g, 60 + p.x * PIECE_WIDTH, 380 + (3 - p.y) * 20, getPieceColor(type));
        }
    }

    getBoardCellColor(boardCell) {
        if (boardCell.isEmpty()) {
            return Color.BLACK;
        }
        return getPieceColor(boardCell.getPieceType());
    }

    getPieceColor(pieceType) {
        if(pieceType == PieceType.I){
            return Color.RED;
        }
        if(pieceType == PieceType.J) {
            return Color.GRAY;
        }
        if(pieceType == PieceType.L) {
            return Color.CYAN;
       }
        if(pieceType == PieceType.O) {
            return Color.BLUE;
        }
        if(pieceType == PieceType.S) {
            return Color.GREEN;
        }
        return Color.MAGENTA;
    }

    drawBlock(g, x, y, color) {
        g.setColor(color);
        g.fillRect(x, y, PIECE_WIDTH, PIECE_WIDTH);
        g.drawRect(x, y, PIECE_WIDTH, PIECE_WIDTH);
    }

}
class KeyboardInput with KeyListener {

    const currentStates = new ConcurrentHashMap();

    new() {
        currentStates.put(KeyEvent.VK_LEFT, Boolean.FALSE);
        currentStates.put(KeyEvent.VK_RIGHT, Boolean.FALSE);
        currentStates.put(KeyEvent.VK_UP, Boolean.FALSE);
        currentStates.put(KeyEvent.VK_SPACE, Boolean.FALSE);
        currentStates.put(KeyEvent.VK_F2, Boolean.FALSE);
        currentStates.put(KeyEvent.VK_F1, Boolean.FALSE);
    }

    left() {
        return keyDown(KeyEvent.VK_LEFT);
    }

    right() {
        return keyDown(KeyEvent.VK_RIGHT);
    }

    drop() {
        return keyDown(KeyEvent.VK_SPACE);
    }

    rotate() {
        return keyDown(KeyEvent.VK_UP);
    }

    pauseGame() {
        return keyDown(KeyEvent.VK_F1);
    }

    newGame() {
        return keyDown(KeyEvent.VK_F2);
    }

    keyDown(keyCode) {
        return currentStates.put(keyCode, Boolean.FALSE);
    }

    keyPressed(keyEvent) {
        if (currentStates.containsKey(keyEvent.getKeyCode())) {
            currentStates.put(keyEvent.getKeyCode(), Boolean.TRUE);
        }
    }

    keyReleased(e) {
    }

    
    keyTyped(e) {
    }
}
enum PieceType {
    
    O(0, p(-1, 0), p(0, 0),  p(-1, -1), p(0, -1)),
    I(2, p(-2, 0), p(-1, 0), p(0, 0),   p(1, 0)),
    S(2, p(0, 0),  p(1, 0),  p(-1, -1), p(0, -1)),
    Z(2, p(-1, 0), p(0, 0),  p(0, -1),  p(1, -1)),
    L(4, p(-1, 0), p(0, 0),  p(1, 0),   p(-1, -1)),
    J(4, p(-1, 0), p(0, 0),  p(1, 0),   p(1, -1)),
    T(4, p(-1, 0), p(0, 0),  p(1, 0),   p(0, -1));

    static const random = new Random();
    var maxOrientations;
    var points;

    new(maxOrientations, p1, p2, p3, p4) {
        this.maxOrientations = maxOrientations;
        this.points = [p1, p2, p3, p4];
    }

    static getRandomPiece() {
        return PieceType.values[random.nextInt(PieceType.values.size())];
    }

    getPoints() {
        return points;
    }

    getMaxOrientations() {
        return maxOrientations;
    }

    static p(x, y) {
        return new Point(x, y);
    }
}
class Piece {

    var points;
    var type;
    var initialOrientation;

    new(pieceType, points, initial) {
        initialOrientation = initial;
        this.points = points;
        this.type = pieceType;
    }

    static getRandomPiece() {
        var pieceType = PieceType.getRandomPiece();
        return new Piece(pieceType, pieceType.getPoints(), true);
    }

    static getPiece(pieceType) {
        return new Piece(pieceType, pieceType.getPoints(), true);
    }

    getType() {
        return type;
    }

    getPoints() {
        return points;
    }

    rotate() {
        if (type.getMaxOrientations() == 0) {
            return this;
        } else if (type.getMaxOrientations() == 2) {
            if (initialOrientation) {
                return new Piece(type, rotateRight(points), false);
            } else {
                return new Piece(type, rotateLeft(points), true);
            }
        }
        return new Piece(type, rotateRight(points), true);
    }

    rotateLeft(toRotate) {
        return rotate(toRotate, 1, -1);
    }

    rotateRight(toRotate) {
        return rotate(toRotate, -1, 1);
    }

    rotate(toRotate, x,  y) {
        var rotated = new Point[4];

        for (var i = 0; i < 4; i++) {
            var temp = toRotate[i].x;
            rotated[i] = new Point(x * toRotate[i].y, y * temp);
        }

        return rotated;
    }

}
class Game {

    var board;
    var nextPiece;

    var playing = false;
    var paused = false;
    var dropping = false;
    var gameOver = false;

    var freeFallIterations = 0;
    var totalScore = 0;

    new() {
        board = new Board();
    }

    getBoardCells() {
        return board.getBoardWithPiece();
    }

    getNextPiece() {
        return nextPiece;
    }

    getIterationDelay() {
        return (((11 - getLevel()) * 0.05) * 1000);
    }

    getScore() {
        return ((21 + (3 * getLevel())) - freeFallIterations);
    }

    getTotalScore() {
        return totalScore;
    }

    getLines() {
        return board.getFullLines();
    }

    getLevel() {
        if ((board.getFullLines() >= 1) && (board.getFullLines() <= 90)) {
            return 1 + ((board.getFullLines() - 1) / 10);
        } else if (board.getFullLines() >= 91) {
            return 10;
        } else {
            return 1;
        }
    }

    startGame() {
        paused = false;
        dropping = false;
        nextPiece = Piece.getRandomPiece();
        board.setCurrentPiece(Piece.getRandomPiece());
        playing = true;
    }

    isPlaying() {
        return playing;
    }

    isPaused() {
        return paused;
    }

    isGameOver() {
        return gameOver;
    }

    pauseGame() {
        paused = !paused;
    }

    moveLeft() {
        board.moveLeft();
    }

    moveRight() {
        board.moveRight();
    }

    moveDown() {
        if (!board.canCurrentPieceMoveDown()) {

            if (freeFallIterations == 0) {
                playing = false;
                gameOver = true;
            } else {
                dropping = false;
                board.setCurrentPiece(nextPiece);
                nextPiece = Piece.getRandomPiece();
                totalScore += getScore();
                freeFallIterations = 0;
            }
        } else {
            board.moveDown();
            freeFallIterations++;
        }
    }

    rotate() {
        board.rotate();
    }

    drop() {
        dropping = true;
    }

    isDropping() {
        return dropping;
    }

}
class BoardCell {

    var pieceType;

    new() {
        pieceType = null;
    }

    new(type) {
        pieceType = type;
    }

    isEmpty() {
        return pieceType == null;
    }

    getPieceType() {
        return pieceType;
    }

    static getCell(pieceType) {
        return new BoardCell(pieceType);
    }

    static getEmptyArray(size) {
        var cells = new BoardCell[size];
        Arrays.fill(cells, new BoardCell());
        return cells;
    }

}
/**
 * 20 [ ][ ][ ][X][X][X][X][ ][ ][ ]
 * 19 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 18 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 17 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 16 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 15 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 14 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 13 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 12 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 11 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 10 [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 9  [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 8  [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 7  [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 6  [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 5  [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 4  [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 3  [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 2  [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 * 1  [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]
 *     1  2  3  4  5  6  7  8  9 10
 */
class Board {

    static const DROP_X = 5;
    static const DROP_Y = 19;

    static const WIDTH = 10;
    static const HEIGHT = 20;

    var pieceCenter = new Point(DROP_X, DROP_Y);

    var currentPiece;

    var board = new BoardCell[WIDTH][HEIGHT];

    var fullLines = 0;

    new() {
        board = createEmptyBoard();
    }

    getWidth() {
        return WIDTH;
    }

    getHeight() {
        return HEIGHT;
    }

    getFullLines() {
        return fullLines;
    }

    getBoardAt(x, y) {
        return board[x][y];
    }

    isRowFull(y) {
        for (var x = 0; x < WIDTH; x++) {
            if (getBoardAt(x, y).isEmpty()) {
                return false;
            }
        }
        return true;
    }

    removeFullRows() {
        var boardX = createEmptyBoard();

        var full = 0;
        for (var y = 0; y < HEIGHT; y++) {
            if (isRowFull(y)) {
                full++;
            } else {
                copyRow(boardX, y, y-full);
            }
        }

        fullLines += full;
        board = boardX;
    }

    copyRow(to, y, toy) {
        for (var x = 0; x < WIDTH; x++) {
            to[x][toy] = board[x][y];
        }
    }

    createEmptyBoard() {
        var boardX = new BoardCell[WIDTH][HEIGHT];

        for (var x = 0; x < WIDTH; x++) {
            boardX[x] = BoardCell.getEmptyArray(HEIGHT);
        }
        return boardX;
    }

    rotate() {
        var rot = currentPiece.rotate();
        if (fit(rot.getPoints(), 0, 0)) {

            currentPiece = rot;
        }
    }

    moveLeft() {
        if (fit(currentPiece.getPoints(), -1, 0)) {
            mv( -1, 0);
        }
    }

    moveRight() {
        if (fit(currentPiece.getPoints(), 1, 0)) {
            mv(1, 0);
        }
    }

    canCurrentPieceMoveDown() {
        return fit(currentPiece.getPoints(), 0, -1);
    }

    moveDown() {
        if (canCurrentPieceMoveDown()) {
            mv(0, -1);
            removeFullRows();
        }
    }

    fit(points, moveX, moveY) {
        for (var point in points) {
            var x = pieceCenter.x + point.x + moveX;
            var y = pieceCenter.y + point.y + moveY;

            if (x < 0 || x >= getWidth() || y >= getHeight() || y < 0) {
                return false;
            }

            if (!board[x][y].isEmpty()) {
                return false;
            }
        }

        return true;
    }

    getBoardWithPiece() {
        var dest = new BoardCell[WIDTH][HEIGHT];

        for (var y = 0; y < WIDTH; y++) {
            System.arraycopy(board[y], 0, dest[y], 0, board[0].size());
        }

        // add piece
        for (var point in currentPiece.getPoints()) {
            var x = point.x + pieceCenter.x;
            var y = point.y + pieceCenter.y;
            dest[x][y] = BoardCell.getCell(currentPiece.getType());
        }
        return dest;
    }

    addPieceToBoard() {
        for (var point in currentPiece.getPoints()) {
            var x = pieceCenter.x + point.x;
            var y = pieceCenter.y + point.y;
            board[x][y] = BoardCell.getCell(currentPiece.getType());
        }
    }

    mv(moveX, moveY) {
        pieceCenter = new Point(pieceCenter.x + moveX, pieceCenter.y + moveY);
    }

    setCurrentPiece(piece) {
        if (currentPiece != null) {
            addPieceToBoard();
        }
        currentPiece = piece;
        resetPieceCenter();
    }

    resetPieceCenter() {
        pieceCenter.x = DROP_X;
        pieceCenter.y = DROP_Y;
    }

}

new Tetris().gameLoop();
