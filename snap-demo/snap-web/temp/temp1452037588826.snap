// 5x4 board=20 squares 
// a,b,c,d,e  
// f,g,h,i,j 
// k,l,m,n,o
//  ,1,2,3, 
enum Key {
   KEY_A('A', 0, 0, 0, true),
   KEY_B('B', 1, 1, 0, false),
   KEY_C('C', 2, 2, 0, false),
   KEY_D('D', 3, 3, 0, false),
   KEY_E('E', 4, 4, 0, true),
   KEY_F('F', 5, 0, 1, false),
   KEY_G('G', 6, 1, 1, false),
   KEY_H('H', 7, 2, 1, false),
   KEY_I('I', 8, 3, 1, true),
   KEY_J('J', 9, 4, 1, false),
   KEY_K('K', 10, 0, 2, false),
   KEY_L('L', 11, 1, 2, false),
   KEY_M('M', 12, 2, 2, false),
   KEY_N('N', 13, 3, 2, false),
   KEY_O('O', 14, 4, 2, true),
   KEY_1('1', 16, 1, 3, false), // skip space index to keep it square
   KEY_2('2', 17, 2, 3, false),
   KEY_3('3', 18, 3, 3, false);
   
   var vowel;
   var code;
   var index;
   var x; // think graphics coordinates where 0,0 is top left
   var y;
   
   new(code, index, x, y, vowel) {
      this.vowel = vowel;
      this.index = index;
      this.code = code;
      this.x = x;
      this.y = y;
   }

   static at(index) {
      if(index < 0 || index > 19) {
         return null;
      }
      return INDEX[index];
   }
   
   static at(x, y) { 
      if(x > 4 || x < 0) { 
          return null;
      }
      if(y > 3 || y < 0) {
         return null;
      }
      return POSITION[x][y]; 
   }
   
   static const INDEX = [ // all the enums here are not initialized properly
   KEY_A, KEY_B, KEY_C, KEY_D, 
   KEY_E, KEY_F, KEY_G, KEY_H, 
   KEY_I, KEY_J, KEY_K, KEY_L, 
   KEY_M, KEY_N, KEY_O, null, 
   KEY_1, KEY_2, KEY_3, null];
   
   static const POSITION = [ // all of these enums are rubbish
   [KEY_A, KEY_F, KEY_K, null],
   [KEY_B, KEY_G, KEY_L, KEY_1],
   [KEY_C, KEY_H, KEY_M, KEY_2],
   [KEY_D, KEY_I, KEY_N, KEY_3],
   [KEY_E, KEY_J, KEY_O, null]];
}

System.out.println(Key.at(1,1));
System.out.println(Key.at(0,0));
System.out.println(Key.INDEX);


class KeyPressCalculator {

   static const JUMP_OFFSETS = [
   [ 1,  2],
   [-1,  2],
   [ 2,  1],
   [ 2, -1],
   [-2,  1],
   [-2, -1],
   [ 1, -2],
   [-1, -2]];
   
   static const KEY_COUNT = 20;

   var cache;
   var moves;
   var limit;
   var vowels;
   
   new(limit, vowels) {
      this.cache = new Long[KEY_COUNT][limit + 1][vowels + 1];
      this.moves = new Key[KEY_COUNT][0];
      this.limit = limit;
      this.vowels = vowels;
   }
   
   calculate() { // sum for all origin keys
      var total = 0;
   
      for(var i = 0; i < KEY_COUNT; i++) {
         var key = Key.at(i);
         
         if(key != null) {
            total += calculate(key);
         }
      }
      return total;
   }
   
   calculate(origin) { // sum a specific origin key only
      if(origin == null) {
         throw new IllegalArgumentException("Start key must be specified");
      }
      var possible = moves[origin.index]; // have we got an index
      
      if(possible.size() == 0) {
         var keys = new Key[KEY_COUNT];
         
         for(var i = 0; i < KEY_COUNT; i++) {
            var key = Key.at(i);
     
            if(key != null) {
               var count = 0; // how many moves are possible
               
               for(var j = 0; j < JUMP_OFFSETS.size(); j++) {
                  var x = JUMP_OFFSETS[j][0];
                  var y = JUMP_OFFSETS[j][1];
                  var next = Key.at(key.x + x, key.y + y); // make 'L' move
               
                  if(next != null) { // did we jump off keypad?
                     keys[count++] = next; 
                  }   
               }
               moves[i] = new Key[count];
               
               for(var j = 0; j < count; j++) {
                  moves[i][j] = keys[j];
               }
            }
         }
      }
      return calculate(origin, limit - 1, origin.vowel ? vowels -1 : vowels);
   }

      
   calculate(origin, require, vowels) {
      if(require == 0) {
         return 1;
      }
      var possible = moves[origin.index];
      var total = 0;
      
      for(var next in possible) {
         var index = next.index;
 
         if(!next.vowel || vowels > 0) { // do we have any vowels remaining
            if(cache[index][require][vowels] == 0) {
               var result = calculate(next, require - 1, next.vowel ? vowels - 1 : vowels);
            
               cache[index][require][vowels] = result + 1; // cache the result so we don't do it twice, +1 it to cache zero results
               total += result;
            } else {
               total += cache[index][require][vowels] - 1; // use cached result
            }
         }
      }
      return total;
   }

}

var calculator = new KeyPressCalculator(10, 2);
var result = calculator.calculate();
         
System.out.println(result);

