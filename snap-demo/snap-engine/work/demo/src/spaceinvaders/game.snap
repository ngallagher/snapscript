import awt.Canvas;
import awt.Color;
import awt.Dimension;
import awt.Graphics2D;
import awt.event.WindowAdapter;
import awt.event.WindowEvent;
import awt.image.BufferStrategy;
import awt.Graphics;
import awt.Rectangle;
import awt.event.KeyListener;
import awt.event.KeyEvent;
import awt.Graphics;
import awt.Image;
import awt.GraphicsConfiguration;
import awt.GraphicsEnvironment;
import awt.Image;
import awt.Transparency;
import awt.image.BufferedImage;
import io.IOException;
import util.HashMap;
import util.ArrayList;
import net.URL;
import swing.JFrame;
import swing.JPanel;
import imageio.ImageIO;

/**
 * A resource manager for sprites in the game. Its often quite important
 * how and where you get your game resources from. In most cases
 * it makes sense to have a central resource loader that goes away, gets
 * your resources and caches them for future use.
 */
module SpriteStore {
   
   /** The cached sprite map, from reference to sprite instance */
   var sprites = {:};

   /**
    * Retrieve a sprite from the store
    * 
    * @param ref The reference to the image to use for the sprite
    * @return A sprite instance containing an accelerate image of the request reference
    */
   function getSprite(ref) {
      // if we've already got the sprite in the cache
      // then just return the existing version
      if (sprites.get(ref) != null) {
         return sprites.get(ref);
      }
      
      // otherwise, go away and grab the sprite from the resource
      // loader
      var sourceImage = null;
      
      try {
         // The Module.getResource() ensures we get the sprite
         // from the appropriate place, this helps with deploying the game
         // from a remote server. You could equally do a file look
         // up here.
         var stream = Sprite.class.getModule().getResource(ref);
         
         if (stream == null) {
            fail("Can't find ref: "+ref);
         }
         
         // use ImageIO to read the image in
         sourceImage = ImageIO.read(stream);
      } catch (e) {
         fail("Failed to load: "+ref);
      }
      
      // create an accelerated image of the right size to store our sprite in
      var gc = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();
      var image = gc.createCompatibleImage(sourceImage.getWidth(),sourceImage.getHeight(),Transparency.BITMASK);
      
      // draw our source image into the accelerated image
      image.getGraphics().drawImage(sourceImage,0,0,null);
      
      // create a sprite, add it the cache then return it
      var sprite = new Sprite(image);
      sprites.put(ref,sprite);
      
      return sprite;
   }
   
   /**
    * Utility method to handle resource loading failure
    * 
    * @param message The message to display on failure
    */
   function fail(message) {
      // we're pretty dramatic here, if a resource isn't available
      // we dump the message and exit the game
      System.err.println(message);
      System.exit(0);
   }
}
/**
 * A sprite to be displayed on the screen. Note that a sprite
 * contains no state information, i.e. its just the image and 
 * not the location. This allows us to use a single sprite in
 * lots of different places without having to store multiple 
 * copies of the image.
 */
class Sprite {
   /** The image to be drawn for this sprite */
   var image;
   
   /**
    * Create a new sprite based on an image
    * 
    * @param image The image that is this sprite
    */
   new(image) {
      this.image = image;
   }
   
   /**
    * Get the width of the drawn sprite
    * 
    * @return The width in pixels of this sprite
    */
   getWidth() {
      return image.getWidth(null);
   }

   /**
    * Get the height of the drawn sprite
    * 
    * @return The height in pixels of this sprite
    */
   getHeight() {
      return image.getHeight(null);
   }
   
   /**
    * Draw the sprite onto the graphics context provided
    * 
    * @param g The graphics context on which to draw the sprite
    * @param x The x location at which to draw the sprite
    * @param y The y location at which to draw the sprite
    */
   draw(g, x, y) {
      g.drawImage(image,x,y,null);
   }
}
/**
 * An entity representing a shot fired by the player's ship
 */
class ShotEntity extends Entity {
   /** The vertical speed at which the players shot moves */
   var moveSpeed = -300.0;
   /** The game in which this entity exists */
   var game;
   /** True if this shot has been "used", i.e. its hit something */
   var used = false;
   
   /**
    * Create a new shot from the player
    * 
    * @param game The game in which the shot has been created
    * @param sprite The sprite representing this shot
    * @param x The initial x location of the shot
    * @param y The initial y location of the shot
    */
   new(game, sprite, x, y) : super(sprite,x,y) {
      this.game = game;
      this.dy = moveSpeed;
   }

   /**
    * Request that this shot moved based on time elapsed
    * 
    * @param delta The time that has elapsed since last move
    */
   move(delta) {
      // proceed with normal move
      super.move(delta);
      
      // if we shot off the screen, remove ourselfs
      if (y < -100) {
         game.removeEntity(this);
      }
   }
   
   /**
    * Notification that this shot has collided with another
    * entity
    * 
    * @parma other The other entity with which we've collided
    */
   collidedWith(other) {
      // prevents double kills, if we've already hit something,
      // don't collide
      if (used) {
         return;
      }
      
      // if we've hit an alien, kill it!
      if (other.class == AlienEntity) {
         // remove the affected entities
         game.removeEntity(this);
         game.removeEntity(other);
         
         // notify the game that the alien has been killed
         game.notifyAlienKilled();
         used = true;
      }
   }
}
/**
 * The entity that represents the players ship
 */
class ShipEntity extends Entity {
   /** The game in which the ship exists */
   var game;
   
   /**
    * Create a new entity to represent the players ship
    *  
    * @param game The game in which the ship is being created
    * @param ref The reference to the sprite to show for the ship
    * @param x The initial x location of the player's ship
    * @param y The initial y location of the player's ship
    */
   new(game, ref, x, y) : super(ref,x,y){
      this.game = game;
   }
   
   /**
    * Request that the ship move itself based on an elapsed ammount of
    * time
    * 
    * @param delta The time that has elapsed since last move (ms)
    */
   move(delta) {
      // if we're moving left and have reached the left hand side
      // of the screen, don't move
      if (dx < 0 && x < 10) {
         return;
      }
      // if we're moving right and have reached the right hand side
      // of the screen, don't move
      if (dx > 0 && x > 750) {
         return;
      }
      
      super.move(delta);
   }
   
   /**
    * Notification that the player's ship has collided with something
    * 
    * @param other The entity with which the ship has collided
    */
   collidedWith(other) {
      // if its an alien, notify the game that the player
      // is dead
      if (other.class == AlienEntity) {
         game.notifyDeath();
      }
   }
}
/**
 * A class to handle keyboard input from the user. The class
 * handles both dynamic input during game play, i.e. left/right 
 * and shoot, and more static type input (i.e. press any key to
 * continue)
 * 
 * This has been implemented as an inner class more through 
 * habbit then anything else. Its perfectly normal to implement
 * this as seperate class if slight less convienient.
 * 
 * @author Kevin Glass
 */
class GameController with KeyListener {
   /** The number of key presses we've had while waiting for an "any key" press */
   var pressCount = 1;
   
   var game;
   
   new(game) {
      this.game = game;
   }
   
   /**
    * Notification from AWT that a key has been pressed. Note that
    * a key being pressed is equal to being pushed down but *NOT*
    * released. Thats where keyTyped() comes in.
    *
    * @param e The details of the key that was pressed 
    */
   keyPressed(e) {
      // if we're waiting for an "any key" typed then we don't 
      // want to do anything with just a "press"
      if (game.waitingForKeyPress) {
         return;
      }
      
      
      if (e.getKeyCode() == KeyEvent.VK_LEFT) {
         game.leftPressed = true;
      }
      if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
         game.rightPressed = true;
      }
      if (e.getKeyCode() == KeyEvent.VK_SPACE) {
         game.firePressed = true;
      }
   } 
   
   /**
    * Notification from AWT that a key has been released.
    *
    * @param e The details of the key that was released 
    */
   keyReleased(e) {
      // if we're waiting for an "any key" typed then we don't 
      // want to do anything with just a "released"
      if (game.waitingForKeyPress) {
         return;
      }
      
      if (e.getKeyCode() == KeyEvent.VK_LEFT) {
         game.leftPressed = false;
      }
      if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
         game.rightPressed = false;
      }
      if (e.getKeyCode() == KeyEvent.VK_SPACE) {
         game.firePressed = false;
      }
   }

   /**
    * Notification from AWT that a key has been typed. Note that
    * typing a key means to both press and then release it.
    *
    * @param e The details of the key that was typed. 
    */
   keyTyped(e) {
      // if we're waiting for a "any key" type then
      // check if we've recieved any recently. We may
      // have had a keyType() event from the user releasing
      // the shoot or move keys, hence the use of the "pressCount"
      // counter.
      if (game.waitingForKeyPress) {
         if (pressCount == 1) {
            // since we've now recieved our key typed
            // event we can mark it as such and start 
            // our new game
            game.waitingForKeyPress = false;
            game.startGame();
            pressCount = 0;
         } else {
            pressCount++;
         }
      }
      
      // if we hit escape, then quit the game
      if (e.getKeyChar() == 27) {
         System.exit(0);
      }
   }
}
/**
 * An entity represents any element that appears in the game. The
 * entity is responsible for resolving collisions and movement
 * based on a set of properties defined either by subclass or externally.
 * 
 * Note that doubles are used for positions. This may seem strange
 * given that pixels locations are integers. However, using double means
 * that an entity can move a partial pixel. It doesn't of course mean that
 * they will be display half way through a pixel but allows us not lose
 * accuracy as we move.
 */
class Entity {
   /** The current x location of this entity */ 
   var x = 0.0;
   /** The current y location of this entity */
   var y = 0.0;
   /** The sprite that represents this entity */
   var sprite = null;
   /** The current speed of this entity horizontally (pixels/sec) */
   var dx = 0.0;
   /** The current speed of this entity vertically (pixels/sec) */
   var dy = 0.0;
   /** The rectangle used for this entity during collisions  resolution */
   var me = new Rectangle();
   /** The rectangle used for other entities during collision resolution */
   var him = new Rectangle();
   
   /**
    * Construct a entity based on a sprite image and a location.
    * 
    * @param ref The reference to the image to be displayed for this entity
     * @param x The initial x location of this entity
    * @param y The initial y location of this entity
    */
   new(ref, x, y) {
      this.sprite = SpriteStore.getSprite(ref);
      this.x = x;
      this.y = y;
   }
   
   /**
    * Request that this entity move itself based on a certain ammount
    * of time passing.
    * 
    * @param delta The ammount of time that has passed in milliseconds
    */
   move(delta) {
      // update the location of the entity based on move speeds
      x += (delta * dx) / 1000;
      y += (delta * dy) / 1000;
   }
   
   /**
    * Set the horizontal speed of this entity
    * 
    * @param dx The horizontal speed of this entity (pixels/sec)
    */
   setHorizontalMovement(dx) {
      this.dx = dx;
   }

   /**
    * Set the vertical speed of this entity
    * 
    * @param dx The vertical speed of this entity (pixels/sec)
    */
    setVerticalMovement(dy) {
      this.dy = dy;
   }
   
   /**
    * Get the horizontal speed of this entity
    * 
    * @return The horizontal speed of this entity (pixels/sec)
    */
   getHorizontalMovement() {
      return dx;
   }

   /**
    * Get the vertical speed of this entity
    * 
    * @return The vertical speed of this entity (pixels/sec)
    */
   getVerticalMovement() {
      return dy;
   }
   
   /**
    * Draw this entity to the graphics context provided
    * 
    * @param g The graphics context on which to draw
    */
   draw(g) {
      sprite.draw(g, x, y);
   }
   
   /**
    * Do the logic associated with this entity. This method
    * will be called periodically based on game events
    */
   doLogic() {
   }
   
   /**
    * Get the x location of this entity
    * 
    * @return The x location of this entity
    */
   getX() {
      return x;
   }

   /**
    * Get the y location of this entity
    * 
    * @return The y location of this entity
    */
   getY() {
      return y;
   }
   
   /**
    * Check if this entity collised with another.
    * 
    * @param other The other entity to check collision against
    * @return True if the entities collide with each other
    */
   collidesWith(other) {
      me.setBounds(x,y,sprite.getWidth(),sprite.getHeight());
      him.setBounds(other.x,other.y,other.sprite.getWidth(),other.sprite.getHeight());

      return me.intersects(him);
   }
   
   /**
    * Notification that this entity collided with another.
    * 
    * @param other The entity with which this entity collided.
    */
   collidedWith(other){}
}
/**
 * An entity which represents one of our space invader aliens.
 */
class AlienEntity extends Entity {
   /** The speed at which the alient moves horizontally */
   var moveSpeed = 75.0;
   /** The game in which the entity exists */
   var game;
   
   /**
    * Create a new alien entity
    * 
    * @param game The game in which this entity is being created
    * @param ref The sprite which should be displayed for this alien
    * @param x The intial x location of this alien
    * @param y The intial y location of this alient
    */
   new(game, ref, x, y) : super(ref,x,y){
      this.game = game;
      this.dx = -moveSpeed;
   }

   /**
    * Request that this alien moved based on time elapsed
    * 
    * @param delta The time that has elapsed since last move
    */
   move(delta) {
      // if we have reached the left hand side of the screen and
      // are moving left then request a logic update 
      if (dx < 0 && x < 10) {
         game.updateLogic();
      }
      // and vice vesa, if we have reached the right hand side of 
      // the screen and are moving right, request a logic update
      if (dx > 0 && x > 750) {
         game.updateLogic();
      }
      
      // proceed with normal move
      super.move(delta);
   }
   
   /**
    * Update the game logic related to aliens
    */
   doLogic() {
      // swap over horizontal movement and move down the
      // screen a bit
      dx = -dx;
      y += 10;
      
      // if we've reached the bottom of the screen then the player
      // dies
      if (y > 570) {
         game.notifyDeath();
      }
   }
   
   /**
    * Notification that this alien has collided with another entity
    * 
    * @param other The other entity
    */
   collidedWith(other) {
      // collisions with aliens are handled elsewhere
   }
}
/**
 * The main hook of our game. This class with both act as a manager
 * for the display and central mediator for the game logic. 
 * 
 * Display management will consist of a loop that cycles round all
 * entities in the game asking them to move and then drawing them
 * in the appropriate place. With the help of an inner class it
 * will also allow the player to control the main ship.
 * 
 * As a mediator it will be informed when entities within our game
 * detect events (e.g. alient killed, played died) and will take
 * appropriate game actions.
 */
class Game  {
   /** The stragey that allows us to use accelerate page flipping */
   var strategy;
   /** True if the game is currently "running", i.e. the game loop is looping */
   var gameRunning = true;
   /** The list of all the entities that exist in our game */
   var entities = [];
   /** The list of entities that need to be removed from the game this loop */
   var removeList = [];
   /** The entity representing the player */
   var ship;
   /** The speed at which the player's ship should move (pixels/sec) */
   var moveSpeed = 300.0;
   /** The time at which last fired a shot */
   var lastFire = 0.0;
   /** The interval between our players shot (ms) */
   var firingInterval = 500.0;
   /** The number of aliens left on the screen */
   var alienCount;
   
   /** The message to display which waiting for a key press */
   var message = "";
   /** True if we're holding up game play until a key has been pressed */
   var waitingForKeyPress = true;
   /** True if the left cursor key is currently pressed */
   var leftPressed = false;
   /** True if the right cursor key is currently pressed */
   var rightPressed = false;
   /** True if we are firing */
   var firePressed = false;
   /** True if game logic needs to be applied this loop, normally as a result of a game event */
   var logicRequiredThisLoop = false;
   
   /**
    * Construct our game and set it running.
    */
   new() {
      // create a frame to contain our game
      var container = new JFrame("Space Invaders 101");
      
      // get hold the content of the frame and set up the resolution of the game
      var panel = container.getContentPane();
      panel.setPreferredSize(new Dimension(800,600));
      panel.setLayout(null);
      var canvas = new Canvas();
      
      // setup our canvas size and put it into the content of the frame
      canvas.setBounds(0,0,800,600);
      panel.add(canvas);
      
      // Tell AWT not to bother repainting our canvas since we're
      // going to do that our self in accelerated mode
      canvas.setIgnoreRepaint(true);
      
      // finally make the window visible 
      container.pack();
      container.setResizable(false);
      container.setVisible(true);
      
      // add a listener to respond to the user closing the window. If they
      // do we'd like to exit the game
      //container.addWindowListener(new WindowAdapter() {
      //   public void windowClosing(WindowEvent e) {
      //      System.exit(0);
      //   }
      //});
      
      // add a key input system (defined below) to our canvas
      // so we can respond to key pressed
      canvas.addKeyListener(new GameController(this));
      
      // request the focus so key events come to us
      canvas.requestFocus();

      // create the buffering strategy which will allow AWT
      // to manage our accelerated graphics
      canvas.createBufferStrategy(2);
      strategy = canvas.getBufferStrategy();
      
      // initialise the entities in our game so there's something
      // to see at startup
      initEntities();
   }
   
   /**
    * Start a fresh game, this should clear out any old data and
    * create a new set.
    */
   startGame() {
      // clear out any existing entities and intialise a new set
      entities.clear();
      initEntities();
      
      // blank out any keyboard settings we might currently have
      leftPressed = false;
      rightPressed = false;
      firePressed = false;
   }
   
   /**
    * Initialise the starting state of the entities (ship and aliens). Each
    * entitiy will be added to the overall list of entities in the game.
    */
   initEntities() {
      // create the player ship and place it roughly in the center of the screen
      ship = new ShipEntity(this, "/spaceinvaders/ship.gif",370,550);     
      entities.add(ship);
      
      // create a block of aliens (5 rows, by 12 aliens, spaced evenly)
      alienCount = 0;
      for (var row=0;row<5;row++) {
         for (var x=0;x<12;x++) {      
            var alien = new AlienEntity(this,"/spaceinvaders/alien.gif",100+(x*50),50+row*30);
            entities.add(alien);
            alienCount++;
         }
      }
   }
   
   /**
    * Notification from a game entity that the logic of the game
    * should be run at the next opportunity (normally as a result of some
    * game event)
    */
   updateLogic() {
      logicRequiredThisLoop = true;
   }
   
   /**
    * Remove an entity from the game. The entity removed will
    * no longer move or be drawn.
    * 
    * @param entity The entity that should be removed
    */
   removeEntity(entity) {
      removeList.add(entity);
   }
   
   /**
    * Notification that the player has died. 
    */
   notifyDeath() {
      message = "Oh no! They got you, try again?";
      waitingForKeyPress = true;
   }
   
   /**
    * Notification that the player has won since all the aliens
    * are dead.
    */
   notifyWin() {
      message = "Well done! You Win!";
      waitingForKeyPress = true;
   }
   
   /**
    * Notification that an alien has been killed
    */
   notifyAlienKilled() {
      // reduce the alient count, if there are none left, the player has won!
      alienCount--;
      
      if (alienCount == 0) {
         notifyWin();
      }
      
      // if there are still some aliens left then they all need to get faster, so
      // speed up all the existing aliens
      for (var i=0;i<entities.size();i++) {
         var entity = entities.get(i);
         
         if (entity.class == AlienEntity) {
            // speed up by 2%
            entity.setHorizontalMovement(entity.getHorizontalMovement() * 1.02);
         }
      }
   }
   
   /**
    * Attempt to fire a shot from the player. Its called "try"
    * since we must first check that the player can fire at this 
    * point, i.e. has he/she waited long enough between shots
    */
   tryToFire() {
      // check that we have waiting long enough to fire
      if (System.currentTimeMillis() - lastFire < firingInterval) {
         return;
      }
      
      // if we waited long enough, create the shot entity, and record the time.
      lastFire = System.currentTimeMillis();
      var shot = new ShotEntity(this,"/spaceinvaders/shot.gif",ship.getX()+10,ship.getY()-30);
      entities.add(shot);
   }
   
   /**
    * The main game loop. This loop is running during all game
    * play as is responsible for the following activities:
    * <p>
    * - Working out the speed of the game loop to update moves
    * - Moving the game entities
    * - Drawing the screen contents (entities, text)
    * - Updating game events
    * - Checking Input
    * <p>
    */
   gameLoop() {
      var lastLoopTime = System.currentTimeMillis();
      
      // keep looping round til the game ends
      while (gameRunning) {
         // work out how long its been since the last update, this
         // will be used to calculate how far the entities should
         // move this loop
         var delta = System.currentTimeMillis() - lastLoopTime;
         lastLoopTime = System.currentTimeMillis();
         
         // Get hold of a graphics context for the accelerated 
         // surface and blank it out
         var g = strategy.getDrawGraphics();
         g.setColor(Color.black);
         g.fillRect(0,0,800,600);
         
         // cycle round asking each entity to move itself
         if (!waitingForKeyPress) {
            for (var i=0;i<entities.size();i++) {
               var entity = entities.get(i);
               
               entity.move(delta);
            }
         }
         
         // cycle round drawing all the entities we have in the game
         for (var i=0;i<entities.size();i++) {
            var entity = entities.get(i);
            
            entity.draw(g);
         }
         
         // brute force collisions, compare every entity against
         // every other entity. If any of them collide notify 
         // both entities that the collision has occured
         for (var p=0;p<entities.size();p++) {
            for (var s=p+1;s<entities.size();s++) {
               var me = entities.get(p);
               var him = entities.get(s);
               
               if (me.collidesWith(him)) {
                  me.collidedWith(him);
                  him.collidedWith(me);
               }
            }
         }
         
         // remove any entity that has been marked for clear up
         entities.removeAll(removeList);
         removeList.clear();

         // if a game event has indicated that game logic should
         // be resolved, cycle round every entity requesting that
         // their personal logic should be considered.
         if (logicRequiredThisLoop) {
            for (var i=0;i<entities.size();i++) {
               var entity = entities.get(i);
               entity.doLogic();
            }
            
            logicRequiredThisLoop = false;
         }
         
         // if we're waiting for an "any key" press then draw the 
         // current message 
         if (waitingForKeyPress) {
            g.setColor(Color.white);
            g.drawString(message,(800-g.getFontMetrics().stringWidth(message))/2,250);
            g.drawString("Press any key",(800-g.getFontMetrics().stringWidth("Press any key"))/2,300);
         }
         
         // finally, we've completed drawing so clear up the graphics
         // and flip the buffer over
         g.dispose();
         strategy.show();
         
         // resolve the movement of the ship. First assume the ship 
         // isn't moving. If either cursor key is pressed then
         // update the movement appropraitely
         ship.setHorizontalMovement(0);
         
         if ((leftPressed) && (!rightPressed)) {
            ship.setHorizontalMovement(-moveSpeed);
         } else if ((rightPressed) && (!leftPressed)) {
            ship.setHorizontalMovement(moveSpeed);
         }
         
         // if we're pressing fire, attempt to fire
         if (firePressed) {
            tryToFire();
         }
         
         // finally pause for a bit. Note: this should run us at about
         // 100 fps but on windows this might vary each loop due to
         // a bad implementation of timer
         try { 
            Thread.sleep(10); 
         } catch (e) {
            e.printStackTrace();
         }
      }
   }
   
}
   
/**
 * The entry point into the game. We'll simply create an
 * instance of class which will start the display and game
 * loop.
 */
function start() {
   var g =new Game();

   // Start the main game loop, note: this method will not
   // return until the game has finished running. Hence we are
   // using the actual main thread to run the game.
   try {
      g.gameLoop();
   } catch(e) {
      e.printStackTrace();
   }
}
   
start();


