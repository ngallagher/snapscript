import org.snapscript.run.Interpreter;

class UnitTestRunner {

	var interpreter;
	var collector;
	
	new(){
		this.collector = new UnitTestCollector();
		this.interpreter = new Interpreter();
	}
	
	run() {
		var tests = collector.collectTests();
		
		try{
			for(var test in tests) {
				System.err.println("RUNNING [" + test + "]");
				interpreter.interpret(test);
				System.out.println("PASS test [" + test + "]");
			}
		} catch(e) {
			System.err.println(e);
		}
	}
}

class UnitTestCollector {
	
	collectTests() {
		var classPath= System.getProperty("java.class.path");
		var result = collectFilesInPath(classPath);
		return result.elements();
	}

	collectFilesInPath(classPath) {
		return collectFilesInRoots(splitClassPath(classPath));
	}
	
	collectFilesInRoots(roots) {
		var result= new Hashtable(100);
		var elements = roots.elements();
		
		for (var element in elements) {
			gatherFiles(new File(element), "", result);
		}
		return result;
	}

	gatherFiles(classRoot, classFileName, result) {
		var thisRoot= new File(classRoot, classFileName);
		if (thisRoot.isFile()) {
			if (isTestClass(classFileName)) {
				var className= classNameFromFile(classFileName);
				result.put(className, className);
			}
			return;
		}		
		var contents= thisRoot.list();
		if (contents != null) { 
			for (var i= 0; i < contents.size(); i++) {
				gatherFiles(classRoot, classFileName+File.separatorChar+contents[i], result);	
			}
		}
	}
	
	splitClassPath(classPath) {
		var result= new Vector();
		var separator= System.getProperty("path.separator");
		var tokenizer= new StringTokenizer(classPath, separator);
		while (tokenizer.hasMoreTokens()) {
			result.addElement(tokenizer.nextToken());
		}
		return result;
	}
	
	isTestClass(classFileName) {
		return classFileName.endsWith("_test.snap");
	}
	
	classNameFromFile(classFileName) {
		return classFileName;
	}
}

trait UnitTest {
	
   execute(){
	  var list = [];
	  
      for(var method in this.class.functions){
         if(method.name.startsWith("test")){
        	 list.add(method.name);
        	 setUp();
        	 method.invocation.invoke(this,this);
        	 tearDown();
         }
      }
      for(var method in list) {
    	  System.err.println("Evaluated ["+method+"]");
      }
   }
   
   assertFalse(a) {
	   if(a) {
		   throw new IllegalStateException("Value was not false");
	   }
   }
   
   assertTrue(a) {
	   if(!a) {
		   throw new IllegalStateException("Value was not true");
	   }
   }
   
   assertNull(a) {
	   if(a != null) {
		   throw new IllegalStateException("Value was not null");
	   }
   }
   
   assertNotNull(a) {
	   if(a == null) {
		   throw new IllegalStateException("Value was null");
	   }
   }
   
   assertEquals(a, b) {
	   if(a == null && b != null) {
		   throw new IllegalStateException("Values are not equal");
	   }
	   if(a != null && b == null) {
		   throw new IllegalStateException("Values are not equal");
	   }
	   if(a.class != b.class) {
		   throw new IllegalStateException("Values are not equal");
	   }
   }
   
   setUp(){}
   tearDown(){}
}